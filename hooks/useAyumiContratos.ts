import { useState, useCallback, useMemo } from 'react';
import { findContractAnswer, contratosDatabase, getContractCategories } from '@/lib/contratosDatabase';
import { ayumiContratosConfig } from '@/config/ayumiContratos';

export interface ContractMessage {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  sources?: string[];
  category?: string;
  confidence?: number;
}

export interface ContractCategory {
  name: string;
  count: number;
  color: string;
}

export interface ContractSearchResult {
  question: string;
  answer: string;
  category: string;
  relevance: number;
  sources: string[];
}

export function useAyumiContratos() {
  const [messages, setMessages] = useState<ContractMessage[]>([
    {
      id: '1',
      text: ayumiContratosConfig.responses.defaultGreeting,
      isUser: false,
      timestamp: new Date(),
      sources: [ayumiContratosConfig.sources.primary],
      category: 'Sauda√ß√£o'
    }
  ]);
  
  const [isLoading, setIsLoading] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [searchQuery, setSearchQuery] = useState('');
  const [showQuickQuestions, setShowQuickQuestions] = useState(true);

  // Obter categorias dispon√≠veis
  const categories = useMemo(() => {
    const allCategories = getContractCategories();
    return allCategories.map(category => ({
      name: category,
      count: contratosDatabase.filter(qa => qa.category === category).length,
      color: ayumiContratosConfig.categories.colors[category as keyof typeof ayumiContratosConfig.categories.colors] || '#6b7280'
    }));
  }, []);

  // Filtrar mensagens por categoria
  const filteredMessages = useMemo(() => {
    if (!selectedCategory) return messages;
    return messages.filter(message => message.category === selectedCategory);
  }, [messages, selectedCategory]);

  // Buscar respostas no banco de dados
  const searchContractDatabase = useCallback((query: string): ContractSearchResult[] => {
    if (!query.trim()) return [];
    
    const cleanQuery = query.toLowerCase();
    const results: ContractSearchResult[] = [];
    
    contratosDatabase.forEach(qa => {
      let relevance = 0;
      
      // Verificar palavras-chave na pergunta
      if (qa.keywords.some(keyword => cleanQuery.includes(keyword.toLowerCase()))) {
        relevance += 3;
      }
      
      // Verificar palavras na pergunta
      if (qa.question.toLowerCase().includes(cleanQuery)) {
        relevance += 2;
      }
      
      // Verificar palavras na resposta
      if (qa.answer.toLowerCase().includes(cleanQuery)) {
        relevance += 1;
      }
      
      // Verificar categoria
      if (qa.category.toLowerCase().includes(cleanQuery)) {
        relevance += 1;
      }
      
      if (relevance > 0) {
        results.push({
          question: qa.question,
          answer: qa.answer,
          category: qa.category,
          relevance,
          sources: [ayumiContratosConfig.sources.primary, qa.contractSection]
        });
      }
    });
    
    // Ordenar por relev√¢ncia
    return results.sort((a, b) => b.relevance - a.relevance);
  }, []);

  // Processar pergunta do usu√°rio
  const processQuestion = useCallback(async (question: string): Promise<void> => {
    if (!question.trim() || isLoading) return;

    const userMessage: ContractMessage = {
      id: Date.now().toString(),
      text: question,
      isUser: true,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);
    setShowQuickQuestions(false);

    try {
      // Simular processamento da IA
      await new Promise(resolve => setTimeout(resolve, ayumiContratosConfig.interface.responseDelay));
      
      // Buscar resposta no banco de dados
      const contractAnswer = findContractAnswer(question);
      
      if (contractAnswer) {
        const qa = contratosDatabase.find(qa => qa.answer === contractAnswer);
        const category = qa?.category || 'Contratos';
        
        const ayumiResponse: ContractMessage = {
          id: (Date.now() + 1).toString(),
          text: contractAnswer,
          isUser: false,
          timestamp: new Date(),
          sources: [ayumiContratosConfig.sources.primary, qa?.contractSection || 'Cl√°usulas Contratuais'],
          category: category,
          confidence: 0.95
        };
        
        setMessages(prev => [...prev, ayumiResponse]);
      } else {
        // Gerar resposta gen√©rica
        const response = generateGenericResponse(question);
        const ayumiResponse: ContractMessage = {
          id: (Date.now() + 1).toString(),
          text: response.answer,
          isUser: false,
          timestamp: new Date(),
          sources: response.sources,
          category: 'Geral',
          confidence: 0.7
        };
        
        setMessages(prev => [...prev, ayumiResponse]);
      }
    } catch (error) {
      console.error('Erro ao processar pergunta:', error);
      const errorResponse: ContractMessage = {
        id: (Date.now() + 1).toString(),
        text: ayumiContratosConfig.responses.fallbackResponse,
        isUser: false,
        timestamp: new Date(),
        category: 'Erro',
        confidence: 0
      };
      setMessages(prev => [...prev, errorResponse]);
    } finally {
      setIsLoading(false);
    }
  }, [isLoading]);

  // Gerar resposta gen√©rica
  const generateGenericResponse = useCallback((question: string): { answer: string; sources: string[] } => {
    const cleanQuestion = question.toLowerCase();
    
    if (cleanQuestion.includes('contrato') || cleanQuestion.includes('cl√°usula')) {
      return {
        answer: `O contrato da Auto Escola Onishi √© um documento legal que estabelece os direitos e obriga√ß√µes de ambas as partes. Ele cont√©m cl√°usulas espec√≠ficas sobre:\n\n‚Ä¢ Servi√ßos prestados\n‚Ä¢ Valores e formas de pagamento\n‚Ä¢ Prazos e cronogramas\n‚Ä¢ Pol√≠ticas de faltas e penalidades\n‚Ä¢ Processos de cancelamento\n‚Ä¢ Garantias e responsabilidades\n\nPara d√∫vidas espec√≠ficas sobre cl√°usulas, por favor, seja mais espec√≠fico na sua pergunta.`,
        sources: [ayumiContratosConfig.sources.primary, 'Cl√°usulas Contratuais']
      };
    }

    if (cleanQuestion.includes('direito') || cleanQuestion.includes('prote√ß√£o')) {
      return {
        answer: `Como consumidor, voc√™ tem direitos garantidos por lei:\n\n‚Ä¢ Direito √† informa√ß√£o clara e adequada\n‚Ä¢ Direito √† qualidade do servi√ßo\n‚Ä¢ Direito √† prote√ß√£o contra pr√°ticas abusivas\n‚Ä¢ Direito ao cumprimento do contrato\n‚Ä¢ Direito √† reclama√ß√£o e resolu√ß√£o de problemas\n\nA Auto Escola Onishi se compromete a respeitar todos os seus direitos e oferecer um servi√ßo de qualidade.`,
        sources: ['C√≥digo de Defesa do Consumidor', ayumiContratosConfig.sources.primary]
      };
    }

    if (cleanQuestion.includes('lei') || cleanQuestion.includes('legal')) {
      return {
        answer: `Os contratos da Auto Escola Onishi seguem as seguintes bases legais:\n\n‚Ä¢ C√≥digo de Defesa do Consumidor (Lei 8.078/90)\n‚Ä¢ C√≥digo Civil (Lei 10.406/2002)\n‚Ä¢ Resolu√ß√£o CONTRAN n¬∫ 789/2020\n‚Ä¢ Lei Geral de Prote√ß√£o de Dados (LGPD)\n‚Ä¢ Normas espec√≠ficas do Detran-SP\n\nTodas as cl√°usulas s√£o elaboradas em conformidade com a legisla√ß√£o vigente.`,
        sources: ['Legisla√ß√£o Brasileira', ayumiContratosConfig.sources.primary]
      };
    }

    // Resposta padr√£o
    return {
      answer: `Obrigado pela sua pergunta sobre contratos da Auto Escola Onishi! ü§ù\n\nPara responder com precis√£o, preciso entender melhor o que voc√™ gostaria de saber. Posso te ajudar com:\n\n‚Ä¢ Cl√°usulas contratuais espec√≠ficas\n‚Ä¢ Obriga√ß√µes e direitos das partes\n‚Ä¢ Processos de cancelamento e rescis√£o\n‚Ä¢ Valores, taxas e condi√ß√µes de pagamento\n‚Ä¢ Pol√≠ticas de faltas e penalidades\n‚Ä¢ Sistema de agendamento e cronogramas\n‚Ä¢ Requisitos de documenta√ß√£o\n‚Ä¢ Garantias e reclama√ß√µes\n\nPor favor, seja mais espec√≠fico na sua pergunta para que eu possa te dar a resposta mais precisa poss√≠vel!`,
      sources: [ayumiContratosConfig.sources.primary]
    };
  }, []);

  // Limpar hist√≥rico de mensagens
  const clearMessages = useCallback(() => {
    setMessages([{
      id: '1',
      text: ayumiContratosConfig.responses.defaultGreeting,
      isUser: false,
      timestamp: new Date(),
      sources: [ayumiContratosConfig.sources.primary],
      category: 'Sauda√ß√£o'
    }]);
    setShowQuickQuestions(true);
  }, []);

  // Exportar conversa
  const exportConversation = useCallback(() => {
    const conversation = messages.map(msg => 
      `${msg.isUser ? 'Usu√°rio' : 'Ayumi'} (${msg.timestamp.toLocaleString('pt-BR')}):\n${msg.text}\n`
    ).join('\n');
    
    const blob = new Blob([conversation], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `conversa-ayumi-contratos-${new Date().toISOString().split('T')[0]}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  }, [messages]);

  return {
    // Estado
    messages,
    filteredMessages,
    isLoading,
    selectedCategory,
    searchQuery,
    showQuickQuestions,
    categories,
    
    // A√ß√µes
    processQuestion,
    setSelectedCategory,
    setSearchQuery,
    setShowQuickQuestions,
    clearMessages,
    exportConversation,
    searchContractDatabase,
    
    // Configura√ß√µes
    config: ayumiContratosConfig
  };
}
